//
// Created by Marius Reimer on 2019-08-10.
//

#include <iostream>
#include <jni.h>
#include <android/log.h>
#include "example.h"
#include "compare.hpp"
#include "fingerprint.hpp"

#define  LOG_TAG    "testjni"
#define  ALOG(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)

using namespace std;

extern "C" {
    JNIEXPORT jlong JNICALL
    Java_com_mariusreimer_rncppcode_RNCPPCodeModule_multiply(JNIEnv *env, jclass type, jlong a, jlong b) {
        return example::multiply(a, b);
    }

    JNIEXPORT jdouble JNICALL
    Java_com_mariusreimer_rncppcode_RNCPPCodeModule_matchFingerPrint(JNIEnv *env, jclass type, jdoubleArray unknownRefs, jdoubleArray unknownPoints, jdoubleArray existingRefs, jdoubleArray existingPoints) {
        jclass jcClass = env->GetObjectClass(unknownRefs);

        jboolean unknownRefsIsCopy;
        jdouble* unknownRefDoubles = env -> GetDoubleArrayElements(unknownRefs, &unknownRefsIsCopy);

        jboolean unknownPointsIsCopy;
        jdouble* unknownPointDoubles = env -> GetDoubleArrayElements(unknownPoints, &unknownPointsIsCopy);
        jint numUnknownPoints = env -> GetArrayLength(unknownPoints);

        jboolean existingRefsIsCopy;
        jdouble* existingRefDoubles = env -> GetDoubleArrayElements(existingRefs, &existingRefsIsCopy);

        jboolean existingPointsIsCopy;
        jdouble* existingPointDoubles = env -> GetDoubleArrayElements(existingPoints, &existingPointsIsCopy);
        jint numExistingPoints = env -> GetArrayLength(existingPoints);

        double refs[] = { 0.0, 0.0, 100.0, 100.0, 0.0, 100.0 };
        double spots[] = {
                10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
                20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
                30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
                40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0
        };
        double refs2[] = { 0.0, 0.0, 100.0, 100.0, 0.0, 100.0 };
        double spots2[] = {
                15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
                20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
                37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0,
                40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0
        };
        int count = 4;

//        ALOG("REFS1: %f %f %f %f %f %f", unknownRefDoubles[0], unknownRefDoubles[1], unknownRefDoubles[2], unknownRefDoubles[3], unknownRefDoubles[4], unknownRefDoubles[5]);
//        for(int i = 0; i < numUnknownPoints * 8; i += 8) {
//            ALOG("POINTS1[%d]: %f %f", i, unknownPointDoubles[i], unknownPointDoubles[i+4]);
//        }
        ALOG("NUM1 %d NUM2 %d", numUnknownPoints, numExistingPoints);
        ALOG("F1 REFS: %f %f %f %f %f %f", unknownRefDoubles[0], unknownRefDoubles[1], unknownRefDoubles[2], unknownRefDoubles[3], unknownRefDoubles[4], unknownRefDoubles[5]);
        for(int i = 0; i < numUnknownPoints; i += 8) {
            ALOG("F1 POINTS[%d]: %f %f", i / 8, unknownPointDoubles[i], unknownPointDoubles[i+4]);
        }
        ALOG("F2 REFS: %f %f %f %f %f %f", existingRefDoubles[0], existingRefDoubles[1], existingRefDoubles[2], existingRefDoubles[3], existingRefDoubles[4], existingRefDoubles[5]);
        for(int i = 0; i < numExistingPoints; i += 8) {
            ALOG("F2 POINTS[%d]: %f %f", i / 8, existingPointDoubles[i], existingPointDoubles[i+4]);
        }
        FingerPrint *f3 = new FingerPrint(existingRefDoubles, existingPointDoubles, numExistingPoints / 8);

        FingerPrint *f1 = new FingerPrint(unknownRefDoubles, unknownPointDoubles, numUnknownPoints / 8);
//        FingerPrint *f2 = new FingerPrint(existingRefDoubles, existingPointDoubles, numExistingPoints / 8);

        // Setup pairs array for algorithm
        Pair *pairs = new Pair[100];
        int paircnt = 0;

        // Compare the two fingerprints. Note the order the fingerprints is important - swapping them will result in vastly different results
        Compare::compareTwo(*f3, *f1, pairs, &paircnt);
        // The comparison stores the score in the "unknown" fingerprint. Retrieve it.
        double score = f1->getScore();

        ALOG("Score!: %f", score);
        return score;

        // Free memory if necessary
        if (unknownRefsIsCopy == JNI_TRUE) {
            env -> ReleaseDoubleArrayElements(unknownRefs, unknownRefDoubles, JNI_ABORT);
        }
        if (unknownPointsIsCopy == JNI_TRUE) {
            env -> ReleaseDoubleArrayElements(unknownPoints, unknownPointDoubles, JNI_ABORT);
        }
        if (existingRefsIsCopy == JNI_TRUE) {
            env -> ReleaseDoubleArrayElements(existingRefs, existingRefDoubles, JNI_ABORT);
        }
        if (existingPointsIsCopy == JNI_TRUE) {
            env -> ReleaseDoubleArrayElements(existingPoints, existingPointDoubles, JNI_ABORT);
        }


         return f1->getScore();
//        return 9.3;
        // return "Hi there";
    }

}