/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import "RNCPPCode.h"
#import "../cpp-code/src/incl/fingerprint.hpp"
#import "../cpp-code/src/incl/compare.hpp"

#pragma mark - RNCPPCode

@implementation RNCPPCode

RCT_EXPORT_MODULE();

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

RCT_EXPORT_METHOD(multiply:(nonnull NSNumber*)a withB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::multiply([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

RCT_EXPORT_METHOD(subtract:(nonnull NSNumber*)a fromB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::subtract([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

- (double*) convertNSArrayOfDoublesToDoubleArray:(NSArray *) arr {
    int count = (int)[arr count];
    double* doubleArray = new double[count];

    for (int i = 0; i < count; i++)
    {
        doubleArray[i] = [arr[i] doubleValue];
    }

    return doubleArray;
}

RCT_EXPORT_METHOD(createFingerPrint:(nonnull NSArray<NSNumber *> *)refs withPoints:(nonnull NSArray<NSNumber *> *)points compareWith:(nonnull NSDictionary *)compareWith resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    // Convert NSArrays to arrays of doubles so we can pass to FingerPrint constructor
    double* refsDouble = [self convertNSArrayOfDoublesToDoubleArray:refs];
    int numPoints = (int)[points count] / 8;
    double* pointsDouble = [self convertNSArrayOfDoublesToDoubleArray:points];

//    FingerPrint * f = new FingerPrint((double *)refsDouble, (double *)pointsDouble, numPoints);
//
    // Create test comparison fgp
    NSArray* compRefs = compareWith[@"refs"];
    NSArray* compPoints = compareWith[@"points"];
    int numCompPoints = (int)[compPoints count] / 8;
    double* compRefsDouble = [self convertNSArrayOfDoublesToDoubleArray:compRefs];
    double* compPointsDouble = [self convertNSArrayOfDoublesToDoubleArray:compPoints];

    FingerPrint *f1 = new FingerPrint(refsDouble, pointsDouble, numPoints);
    FingerPrint *f2 = new FingerPrint(compRefsDouble, compPointsDouble, numCompPoints);
    Pair *pairs = new Pair[100];
    int paircnt = 0;
    Compare::compareTwo(*f2, *f1, pairs, &paircnt);
    printf("scores %f , %f, %d", f1->getScore(), f2->getScore(), paircnt);
    delete[] pairs;

//    resolve([NSNumber numberWithDouble:f1->getScore()]);
    resolve(@{
        @"result": [NSNumber numberWithDouble:f1->getScore()]
    });
}

@end
