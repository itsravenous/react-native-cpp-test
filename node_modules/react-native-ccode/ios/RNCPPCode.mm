/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import "RNCPPCode.h"
#import "../cpp-code/src/incl/Fingerprint.hpp"

#pragma mark - RNCPPCode

@implementation RNCPPCode

RCT_EXPORT_MODULE();

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

RCT_EXPORT_METHOD(multiply:(nonnull NSNumber*)a withB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::multiply([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

RCT_EXPORT_METHOD(subtract:(nonnull NSNumber*)a fromB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::subtract([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

RCT_EXPORT_METHOD(createFingerPrint:(nonnull NSArray<NSNumber *> *)refs withPoints:(nonnull NSArray<NSNumber *> *)points resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    // Convert NSArrays to arrays of doubles so we can pass to FingerPrint constructor
    // Refs - we know there are three
    double* refsArray = new double[3];
    refsArray[0] = [refs[0] doubleValue];
    refsArray[1] = [refs[1] doubleValue];
    refsArray[2] = [refs[2] doubleValue];
    // Points - there could be any number
    int numPoints = (int)[points count];
    double* pointsArray = new double[numPoints];
    for (int i = 0; i < numPoints; i++)
    {
        pointsArray[i] = [points[i] doubleValue];
    }

    // TODO: Multiples of three and eight? See i3s swift implementation

    FingerPrint * f = new FingerPrint((double *)refsArray, (double *)pointsArray, numPoints);

    ptr = reinterpret_cast<std::uintptr_t>f;
    resolve(*f);
}

@end
