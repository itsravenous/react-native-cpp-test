/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import "RNCPPCode.h"
#import "../cpp-code/src/incl/fingerprint.hpp"
#import "../cpp-code/src/incl/compare.hpp"

#pragma mark - RNCPPCode

@implementation RNCPPCode

RCT_EXPORT_MODULE();

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

RCT_EXPORT_METHOD(multiply:(nonnull NSNumber*)a withB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::multiply([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

RCT_EXPORT_METHOD(subtract:(nonnull NSNumber*)a fromB:(nonnull NSNumber*)b resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    long result = example::subtract([a longValue], [b longValue]);

    resolve(@{
              @"result": @(result)
    });
}

- (double*) convertNSArrayOfDoublesToDoubleArray:(NSArray *) arr {
    int count = (int)[arr count];
    double* doubleArray = new double[count];

    for (int i = 0; i < count; i++)
    {
        doubleArray[i] = [arr[i] doubleValue];
    }

    return doubleArray;
}

RCT_EXPORT_METHOD(matchFingerPrint:(nonnull NSDictionary *)newFingerprint compareWith:(nonnull NSArray *)existingFingerprints resolver:(RCTPromiseResolveBlock)resolve
withReject:(RCTPromiseRejectBlock)reject)
{
    // Convert NSArray<NSNumber>s to arrays of doubles so we can pass to FingerPrint constructor
    NSArray* refs = newFingerprint[@"refs"];
    NSArray* points = newFingerprint[@"points"];
    double* refsDouble = [self convertNSArrayOfDoublesToDoubleArray:refs];
    int numPoints = (int)[points count] / 8;
    double* pointsDouble = [self convertNSArrayOfDoublesToDoubleArray:points];

    // Loop over comparison fingerprints and compare with "unknown" fingerprint, recording scores in dictionary
    NSMutableDictionary<NSString *, NSNumber *> *results = [NSMutableDictionary dictionary];
    for (NSDictionary *existingFingerprint in existingFingerprints) {
        // Convert refs and points NSNumbers to doubles for fingerprint against which we are comparing
        NSString* compId = existingFingerprint[@"id"];
        NSArray* compRefs = existingFingerprint[@"refs"];
        NSArray* compPoints = existingFingerprint[@"points"];
        int numCompPoints = (int)[compPoints count] / 8;
        double* compRefsDouble = [self convertNSArrayOfDoublesToDoubleArray:compRefs];
        double* compPointsDouble = [self convertNSArrayOfDoublesToDoubleArray:compPoints];

        // Create fingerprints
        FingerPrint *f1 = new FingerPrint(refsDouble, pointsDouble, numPoints); // The comparison algorithm mutates the fingerprints, so we have to create a new one each time
        FingerPrint *f2 = new FingerPrint(compRefsDouble, compPointsDouble, numCompPoints);

        // Setup pairs array for algorithm
        Pair *pairs = new Pair[100];
        int paircnt = 0;

        // Compare the two fingerprints. Note the order the fingerprints is important - wapping them will result in vastly different results
        Compare::compareTwo(*f2, *f1, pairs, &paircnt);
        // The comparison stores the score in the "unknown" fingerprint. Retrieve it.
        double score = f1->getScore();
        // Add the score to the results dictionary, keyed under the animal's ID
        results[compId] = [NSNumber numberWithDouble:score];

        delete[] pairs;
    }

    resolve(@{
        @"result": results
    });
}

@end
